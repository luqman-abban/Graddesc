{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPs24TeaBqL4GA42KalwcmL"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wANILesRKdp2"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "trainExamples = [\n",
        "    (1, 1),\n",
        "    (2, 3),\n",
        "    (4, 3)\n",
        "]\n",
        "\n",
        "def phi(x):\n",
        "    return np.array([1, x])\n",
        "\n",
        "def initialWeightVector():\n",
        "    return np.zeros(2)\n",
        "\n",
        "def trainLoss(w):\n",
        "    return 1.0 / len(trainExamples) * sum((w.dot(phi(x)) - y)**2 for x, y in trainExamples)\n",
        "\n",
        "def trainLossGradient(w):\n",
        "    return 1.0 / len(trainExamples) * sum(2 * (w.dot(phi(x)) - y) * phi(x) for x, y in trainExamples)\n",
        "\n",
        "def gradientDescent(F, gradientF, initialWeightVector):\n",
        "    w = initialWeightVector()\n",
        "    eta = 0.1\n",
        "    for t in range(10):\n",
        "        value = F(w)\n",
        "        gradient = gradientF(w)\n",
        "        w = w - eta * gradient\n",
        "        print(f'epoch {t}: w = {w}, F(w) = {value}, gradientF = {gradient}')\n",
        "\n",
        "gradientDescent(trainLoss, trainLossGradient, initialWeightVector)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8m03GMl7KhBQ",
        "outputId": "2e571d55-118c-41ae-8e2f-10e6c2544969"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "epoch 0: w = [0.46666667 1.26666667], F(w) = 6.333333333333333, gradientF = [ -4.66666667 -12.66666667]\n",
            "epoch 1: w = [0.24888889 0.54222222], F(w) = 2.318518518518518, gradientF = [2.17777778 7.24444444]\n",
            "epoch 2: w = [0.41274074 0.93362963], F(w) = 1.0534650205761318, gradientF = [-1.63851852 -3.91407407]\n",
            "epoch 3: w = [0.36116543 0.70060247], F(w) = 0.6515254138088706, gradientF = [0.51575309 2.3302716 ]\n",
            "epoch 4: w = [0.42865119 0.81788181], F(w) = 0.5207664184524716, gradientF = [-0.67485761 -1.17279342]\n",
            "epoch 5: w = [0.42790944 0.73947672], F(w) = 0.47544933446504845, gradientF = [0.0074175  0.78405092]\n",
            "epoch 6: w = [0.46390509 0.77118491], F(w) = 0.4572737067633151, gradientF = [-0.35995643 -0.31708187]\n",
            "epoch 7: w = [0.47790445 0.74170366], F(w) = 0.44792263345796046, gradientF = [-0.1399936   0.29481241]\n",
            "epoch 8: w = [0.50286185 0.74696313], F(w) = 0.44162534417265, gradientF = [-0.24957401 -0.05259462]\n",
            "epoch 9: w = [0.52037335 0.73321255], F(w) = 0.4365490699892921, gradientF = [-0.17511505  0.13750572]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sR2Porp3PWTw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}